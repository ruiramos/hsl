{
  "name": "bacon.jquery",
  "version": "0.4.11",
  "author": {
    "name": "Juha Paananen"
  },
  "licenses": [
    "MIT"
  ],
  "dependencies": {
    "baconjs": "~0.7.8"
  },
  "devDependencies": {
    "coffee-script": "1.4.0",
    "mocha": "~1.17",
    "chai": "1.9.0",
    "grunt": "0.4.1",
    "grunt-cli": "0.1.13",
    "grunt-contrib-coffee": "~0.10.0",
    "grunt-contrib-clean": "~0.4.1",
    "grunt-contrib-copy": "~0.4.0",
    "grunt-contrib-uglify": "~0.2.2",
    "phantomjs": "~1",
    "mocha-phantomjs": "~3.3",
    "jquery": "~2",
    "bacon.model": "~0.1.6"
  },
  "scripts": {
    "test": "./run-tests",
    "prepublish": "node_modules/grunt-cli/bin/grunt"
  },
  "main": "dist/bacon.jquery.js",
  "readme": "# bacon.jquery\n\nA JQuery data binding library for [Bacon.js](https://github.com/baconjs/bacon.js).\n\nAdds stuff to `Bacon.$`. Is also called BJQ.\n\nIncludes\n\n- Binding the state of HTML input elements to [`Bacon.Model`](https://github.com/baconjs/bacon.model) objects that extend\n  the Bacon.js `Property` API by providing a bidirectional binding\n- AJAX helpers. Wrap a JQuery AJAX call into an EventStream using\n  `Bacon.$.ajax(\"/get/stuff\")`. Convert an `EventStream` of requests\ninto an `EventStream` of responses like `requests.ajax()`.\n- FRP extensions to JQuery. Wrap JQuery events easily into an `EventStream`, as\n  in `$(\"body\").clickE()`\n\nThis library is intended as a replacement for [Bacon.UI](https://github.com/raimohanska/Bacon.UI.js). It provides the same functionality, with the addition of two-way bound Models, model composition and lenses.\n\n## Example Applications\n\nThere are example applications in the [examples](https://github.com/baconjs/bacon.jquery/tree/master/examples) directory, each with a README.md describing how they are started.\n\nEach application does essentially the same thing and the code in the example applications is essentially just this:\n\n```js\n  // binding for \"left\" text field\n  left = bjq.textFieldValue($(\"#left\"))\n  // binding for \"right\" text field\n  right = bjq.textFieldValue($(\"#right\"))\n  // make a two-way binding between these two\n  // values in the two fields will now stay in sync\n  right.bind(left)\n  // Make a one-way side effect: update label text on changes, uppercase\n  right.map(\".toUpperCase\").changes().assign($(\"#output\"), \"text\")\n  // Add an input stream for resetting the value\n  left.addSource($(\"#reset\").asEventStream(\"click\").map(\"\"))\n```\n\n## API\n\nThe `bacon.jquery` API consists of methods for creating a `Model` representing the\nstate of a DOM element or a group of DOM elements. This API is published\nas `Bacon.$`, and the same object is returned when using AMD or\nCommonJS.\n\n###Bacon.$.textFieldValue(field [, initValue])\n\nCreates a `Model` for an\n`<input type=\"text\">` element, given as a JQuery object. You can optionally supply an initial value.\n\n###Bacon.$.checkBoxValue(field [, initValue])\n\nCreates a `Model` for a\n`<input type=\"checkbox\">` element, given as a JQuery object. The value is `true` if the checkbox is checked and\n`false` otherwise.\n\n###Bacon.$.selectValue(field [,initValue])\n\nCreates a `Model` for a `<select>`\nelement, given as a JQuery object. The value of the model corresponds to the `value` attribute of the selected `<option>` element.\n\n###Bacon.$.radioGroupValue(fields, [,initValue])\n\nCreates a `Model` for a\ngroup of `<input type=\"radio\">` elements, given as a JQuery object or an Array\nof jQuery objects. The value of the model corresponds to the `value` attribute\nof the selected radio input element. Note that `value` is a string.\n\n###Bacon.$.intRadioGroupValue(fields [, initValue])\n\nLike `Bacon.$.radioGroupValue`, but for integer values. \n\n###Bacon.$.checkBoxGroupValue(fields, [,initValue])\n\nCreates a `Model` for a group\nof `<input type=\"checkbox\">` elements, given as a JQuery object or an Array of\njQuery objects. The value of the model is an array of the `value` attributes of\nthe checked checkbox input elements. For instance, if you have checkboxes and 2\nof these are checked, having values `a` and `b`, the value of the Model is\n`[\"a\", \"b\"]`.\n\nTODO: add HTML/JS examples\n\n## FRP extensions to JQuery Events\n\nBJQ adds methods to JQuery, for wrapping events into an `EventStream`.\n\nFor example, to wrap click events on `<body>` into an `EventStream`, you\ncan\n\n    var clicks = $(\"body\").clickE()\n\nSupported methods include the following:\n\n- keydownE\n- keyupE\n- keypressE\n- clickE\n- dblclickE\n- mousedownE\n- mouseupE\n- mouseenterE\n- mouseleaveE\n- mousemoveE\n- mouseoutE\n- mouseoverE\n- dragstart\n- drag\n- dragenter\n- dragleave\n- dragover\n- drop\n- dragend\n- resizeE\n- scrollE\n- selectE\n- changeE\n- submitE\n- blurE\n- focusE\n- focusinE\n- focusoutE\n- loadE\n- unloadE\n\n## FRP extensions to JQuery Effects\n\nBJQ adds methods to JQuery, for performing animations and wrapping the\nresult `Promise` into an `EventStream`. For example\n\n    var fadeOut = $(\"#thing\").fadeOutE(\"fast\")\n\nSupported methods include the following:\n\n- animateE\n- showE\n- hideE\n- toggleE\n- fadeInE\n- fadeOutE\n- fadeToE\n- fadeToggleE\n- slideDownE\n- slideUpE\n- slideToggleE\n\n## AJAX\n\nBJQ provides helpers for JQuery AJAX. All the methods return an\n`EventStream` of AJAX results. AJAX errors are mapped into `Error`\nevents in the stream.\n\nAborted requests are not sent into the error stream. If you want to have a\nstream that observes whether an AJAX request is running, use `Bacon.awaiting`.\nFor example:\n\n    var searchParams = Bacon.once({ url: '/search', data: { query: 'apple' } })\n    var ajaxRequest = searchParams.ajax()\n    var requestRunning = searchParams.awaiting(ajaxRequest)\n    requestRunning.assign($('#ajaxSpinner'), 'toggle')\n\n### stream.ajax(fn)\n\nPerforms an AJAX request on each event of your stream, collating results in the result stream.\n\nThe source stream is expected to provide the parameters for the AJAX call.\n\n    var usernameRequest = username.map(function(un) { return { type: \"get\", url: \"/usernameavailable/\" + un } })\n    var usernameAvailable = usernameRequest.changes().ajax()\n\n### Bacon.$.ajax(params)\n\nPerforms an AJAX request and returns the results in an EventStream.\n\n    var results = Bacon.$.ajax(\"/get/results\")\n\nor\n\n    var results = Bacon.$.ajax({ url: \"/get/results\"})\n\n### Bacon.$.lazyAjax(params)\n\nLike above, but performs the AJAX call lazily, i.e. not before it has a subscriber.\n\n### Bacon.$.ajaxGet(url, data, dataType)\n\n### Bacon.$.ajaxGetJSON(url, data)\n\n### Bacon.$.ajaxPost(url, data, dataType)\n\n### Bacon.$.ajaxGetScripts(url)\n\n### stream.toDeferred()\n\nTurns your Bacon Ajax stream back to $.Deferred. It's useful if you need to provide a solution for users who are not familiar with Bacon.\n\n## Model API\n\nAll the BJQ methods, such as `textFieldValue` return a `Model` object, which is a Bacon.js `Property`, but extends that API by the following methods.\n\n[Model API reference migrated to bacon.model](https://github.com/baconjs/bacon.model)\n\n\nTODO: more\n\n## Use with AMD / RequireJS\n\nThe [requirejs example-app](https://github.com/baconjs/bacon.jquery/tree/master/examples/requirejs) uses RequireJS, like this:\n\n```js\nrequire.config({\n  paths: {\n    \"bacon.jquery\": \"../dist/bacon.jquery\",\n    \"bacon\": \"components/bacon/dist/Bacon\",\n    \"jquery\": \"components/jquery/jquery\"\n  }})\nrequire([\"bacon.jquery\", \"jquery\"], function(bjq, $) {\n  left = bjq.textFieldValue($(\"#left\"))\n  right = bjq.textFieldValue($(\"#right\"))\n  right.bind(left)\n  right.assign($(\"#output\"), \"text\")\n})\n```\n\nThe prebuilt javascript file can be found in the `dist` directory, or [here](https://raw.github.com/baconjs/bacon.jquery/master/dist/Bacon.JQuery.Bindings.js).\n\nThe API can be accessed using `Bacon.$` or like in the above example.\n\n## Use without AMD\n\nThe [plain example-app](https://github.com/baconjs/bacon.jquery/tree/master/examples/plain) uses RequireJS, like this:\n\nSo feel free to use plain old `<script>` tags to include Bacon, JQuery and BJQ.\n\nThe BJQ methods are exposed through `Bacon.$`, so you can call them as in `Bacon.$.textFieldValue(..)`.\n\nThe prebuilt javascript file can be found in the `dist` directory, or [here](https://raw.github.com/baconjs/bacon.jquery/master/dist/Bacon.JQuery.Bindings.js).\n\nThere's a [plain example-app](https://github.com/baconjs/bacon.jquery/tree/master/examples/plain) that uses script tags only.\n\n## Use with Node / Browserify\n\nBJQ is registered in the NPM repository as `bacon.jquery` and works fine with [node-browserify](https://github.com/substack/node-browserify).\n\nSee the [browserify example-app](https://github.com/baconjs/bacon.jquery/tree/master/examples/browserify) for an example.\n\n## Use with Bower\n\nRegistered to the Bower registry as `bacon.jquery`. See the\nExample Applications, for instance [requirejs example-app](https://github.com/baconjs/bacon.jquery/tree/master/examples/requirejs).\n\n## Building\n\nThe `bacon.jquery` module is built using NPM and Grunt.\n\nTo build, use `npm install`.\n\nBuilt javascript files are under the `dist` directory.\n\n## Automatic tests\n\nUse the `npm test` to run all tests.\n\nTests include mocha tests under the `test` directory, and mocha browser tests under the `browsertest`\ndirectory. The test script uses [mocha-phantomjs](http://metaskills.net/mocha-phantomjs/) to run the browser tests headless.\n\nThe browser tests can also be run by opening the\n`browsertest/runner.html` in the browser.\n\nThe tests are also run automatically on [Travis CI](https://travis-ci.org/). See build status below.\n\n[![Build Status](https://travis-ci.org/baconjs/bacon.jquery.png)](https://travis-ci.org/baconjs/bacon.jquery)\n\n## What next?\n\nSee [Issues](https://github.com/baconjs/bacon.jquery/issues).\n\nIf this seems like a good idea, please tell me so! If you'd like to\ncontribute, please do! Pull Requests, Issues etc appreciated. Star this project to let me know that you care.\n",
  "readmeFilename": "README.md",
  "description": "A JQuery data binding library for [Bacon.js](https://github.com/baconjs/bacon.js).",
  "_id": "bacon.jquery@0.4.11",
  "dist": {
    "shasum": "3e78f7c1739b65cfe4798eeb674e152239f17342"
  },
  "_from": "bacon.jquery@",
  "_resolved": "https://registry.npmjs.org/bacon.jquery/-/bacon.jquery-0.4.11.tgz"
}
